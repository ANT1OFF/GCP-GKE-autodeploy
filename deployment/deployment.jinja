{% set CLUSTER_TYP =  'cluster-' + properties['cluster'] + '-type' %}
{% set CLUSTER_TYPE = env['project'] + '/' + CLUSTER_TYP %}

{% set SERVICE_COLLECTION_PREFIX = '/api/v1/namespaces/{namespace}/' %}
{% set SERVICE_COLLECTION = SERVICE_COLLECTION_PREFIX + 'services' %}

{% set DEPLOYMENT_COLLECTION_PREFIX = '/apis/apps/v1beta1/namespaces/{namespace}/' %}
{% set DEPLOYMENT_COLLECTION = DEPLOYMENT_COLLECTION_PREFIX + 'deployments' %}

{% set NAME_PREFIX = env['deployment'] + '-' + env['name'] %}

{% set PORT = properties['port'] %}
{% set PROJECT = env['project'] %}
{% set REGION = properties['region'] %}
{% set DATABASE_NAME = properties['dbname'] %}

resources:
- name: {{ NAME_PREFIX }}-service
  type: {{ CLUSTER_TYPE }}:{{ SERVICE_COLLECTION }}
  properties:
    apiVersion: v1
    kind: Service
    namespace: default
    metadata:
      name: {{ NAME_PREFIX }}-service
      labels:
        id: deployment-manager
    spec:
      type: NodePort
      ports:
      - port: {{ PORT }}
        targetPort: {{ PORT }}
        protocol: TCP
      selector:
        app: {{ NAME_PREFIX }}

- name: {{ NAME_PREFIX }}-deployment
  type: {{ CLUSTER_TYPE }}-apps:{{ DEPLOYMENT_COLLECTION }}
  properties:
    apiVersion: apps/v1beta1
    kind: Deployment
    namespace: default
    metadata:
      name: {{ NAME_PREFIX }}-deployment
    spec:
      replicas: 3
      template:
        metadata:
          labels:
            name: {{ NAME_PREFIX }}-deployment
            app: {{ NAME_PREFIX }}
        spec:
          containers:
          - name: application
            image: {{ properties['image'] }}
            ports:
            - containerPort: {{ PORT }}
          {% if properties['sql'] is sameas true %}
          - name: proxy
            image: gcr.io/cloudsql-docker/gce-proxy:1.16
            command: ["/cloud_sql_proxy",
                      # TODO: get database-instance from name/properties
                      "-instances={{ PROJECT }}:{{ REGION }}:{{ DATABASE_NAME }}-instance=tcp:{{ properties['sqlport'] }}",
                      # If running on a VPC, the Cloud SQL proxy can connect via Private IP. See:
                      # https://cloud.google.com/sql/docs/mysql/private-ip for more info.
                      # "-ip_address_types=PRIVATE",
                      "-credential_file=/secrets/cloudsql/credentials.json"]
            securityContext:
              runAsUser: 2  # non-root user
              allowPrivilegeEscalation: false
            # [END cloudsql_security_context]
            volumeMounts:
              - name: cloudsql-instance-credentials
                mountPath: /secrets/cloudsql
                readOnly: true
          volumes:
            - name: cloudsql-instance-credentials
              secret:
                secretName: cloudsql-instance-credentials
          {% endif %}
           
          

{% if properties['ingress'] is sameas true %}
- name: ingress
  type: ingress.jinja
  properties:
    PORT: {{ PORT }}
    NAME_PREFIX: {{ NAME_PREFIX }}
    CLUSTER_TYPE: {{ CLUSTER_TYPE }}
{% endif %}

  

